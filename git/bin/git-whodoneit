#!/usr/bin/env ruby

# Based on garybernhardt's git-whodoneit:
# https://github.com/garybernhardt/dotfiles/blob/4654a10a7dae81dfc42f89d03aba0bde84492ada/bin/git-whodoneit

class ColouredString
  COLOURS = {
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    light_blue: 36
  }.freeze

  def initialize(str)
    @str = str
  end

  def method_missing(m, *args, &block)
    colour(COLOURS[m]) || super
  end

  private

  def colour(code)
    return unless code

    "\e[#{code}m#{@str}\e[0m"
  end
end

class WhoDoneIt
  PATTERN = ARGV.fetch(0)

  def print
    lines.each do |line|
      puts line
    end
  end

  def lines
    blame_and_code.map do |blame, code|
      blame += " " * (longest_blame_line - blame.length)
      "#{ColouredString.new(blame).yellow} #{code}"
    end
  end

  def blame_and_code
    @blame_and_code ||= blame_lines.map do |line|
      blame, code = line.split(')', 2)
      blame += ")"
      [blame, code]
    end
  end

  def longest_blame_line
    @longest_blame_line ||= blame_and_code.map do |blame, code|
      blame.length
    end.max
  end

  def blame_lines
    @blame_lines ||= matching_files.map do |filename|
      `git blame -f -- #{filename} | grep #{PATTERN}`
    end.map do |line|
      line.split("\n")
    end.flatten
  end

  def matching_files
    @matching_files ||= `git grep -I --name-only #{PATTERN}`.split("\n")
  end
end

WhoDoneIt.new.print
